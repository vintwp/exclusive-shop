// #region category
model Category {
  id                Int      @id @default(autoincrement()) @map("category_id")
  name              String   @map("category_name") @unique
  primaryStoreId    Int      @map("primary_store_id")
  primaryStore      Store    @relation(fields: [primaryStoreId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  additionalStores  StoreCategories[]
  brands            CategoryBrands[]
  refineOption      CategoryRefineOption[]
  items             Item[]
  displayOnMainPage Boolean  @default(false) @map("display_on_main_page")
  image             String   @map("category_logo")
  url               String   @map("category_url")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("category")
}

model CategoryRefineOption {
  id            Int @id @default(autoincrement())
  optionName    String
  optionValue   String
  category      Category @relation(fields: [categoryId], references: [id])
  categoryId    Int
  itemsRefine   Item[]
  assignedAt    DateTime @default(now()) @map("assigned_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@map("category_refine_option")
  @@unique([categoryId, optionName, optionValue])
}


model CategoryBrands {
  categoryId    Int @map("category_id")
  brandId       Int @map("brand_id")
  category      Category @relation(fields: [categoryId], references: [id])
  brand         Brand @relation(fields: [brandId], references: [id])
  assignedAt    DateTime @default(now()) @map("assigned_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  @@id(fields: [categoryId, brandId])
  @@map("_category-brands")
}

// #endregion
